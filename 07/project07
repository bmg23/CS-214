Script started on Tue 02 Apr 2019 06:54:47 PM EDT
bmg23@maroon29:~/214/projects/07$ cat *.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Brian Goins
-- Date: 03/29/2019
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is
  NAME_SIZE : integer := 8; 

 

  type Name is record 
      MyFirst : String(1..NAME_SIZE); 
      MyMiddle : String(1..NAME_SIZE); 
      MyLast : String(1..NAME_SIZE); 
  end record; 
 

  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------
  
  procedure Init (TheName : out Name; First, Middle, Last : in String) is
  begin
      TheName.MyFirst := First;
      TheName.MyMiddle := Middle;
      TheName.MyLast := Last;
  end Init;



  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  function getFirst(TheName : in Name) return String is 
  begin
    return TheName.MyFirst;
  end getFirst; 

  function getMiddle(TheName : in Name) return String is 
  begin
    return TheName.MyMiddle;
  end getMiddle; 

  function getLast(TheName : in Name) return String is 
  begin
    return TheName.MyLast;
  end getLast; 


  ----------------------------------------------
  --                SETTERS                   --
  ----------------------------------------------
  procedure setFirst(first : String; TheName: out Name) is 
  begin 
    TheName.MyFirst := first; 
  end setFirst;

  procedure setMiddle(middle : String; TheName: out Name) is 
  begin 
    TheName.MyMiddle := middle;  
  end setMiddle;

  procedure setLast(last : String; TheName: out Name) is 
  begin 
    TheName.MyLast := last; 
  end setLast;


  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  function getFullName(TheName : in Name) return String is
  begin
    return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;
  end getFullName; 

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  procedure Put(TheName : in Name) is 
  begin 
    Put(getFullName(TheName)); 
  end Put; 


  ---------------------------------------------------  
  --lfmi(Name) displays First, Last Middle Initial. -
  --PRE: theName has been initialized.              -
  --Receive: theName, a Name.                       -
  --Output: First, Last Middle Initial.             -
  ---------------------------------------------------
  function lfmi(TheName : in Name) return String is
  begin 

    return  TheName.MyLast & ", " & TheName.myFirst & " " & TheName.MyMiddle(TheName.MyMiddle'First) & "."; 

  end lfmi; 

  ---------------------------------------------------  
  --read(Name) Takes in user input and sets the name-
  --PRE: theName has been initialized.              -
  --Receive: theName, a Name.                       -
  ---------------------------------------------------
  procedure read(TheName : out Name) is 
    first : String(1..NAME_SIZE);
    middle : String(1..NAME_SIZE);
    last : String(1..NAME_SIZE);

  begin 
    New_line; 
    Put("Enter all parts of your name with 8 Characters, use spaces to fill.");

    New_line;
    Put("Enter First Name: "); 
    Get(first); 
    
    New_line;
    Put("Enter Middle Name: "); 
    Get(middle); 

    New_line;
    Put("Enter Last Name: ");
    Get(last); 

    TheName.MyFirst := first;
    TheName.MyMiddle := middle;
    TheName.MyLast := last; 

  end read; 


begin

  Init(aName, "Brian   ", "Mitchell", "Goins   ");

  --PROJECT TESTS
  
  --Test Setters
  setFirst("Joe     ", aName);
  setMiddle("Billy   ", aName); 
  setLast("Smith   ", aName); 

  pragma Assert( getFirst(aName) = "Joe     ", "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Billy   " , "getMiddle() failed");
  pragma Assert( getLast(aName) = "Smith   ", "getLast() failed");

  --Test Initials
  pragma Assert( lfmi(aName) = "Smith   , Joe      B.", "lmfi() failed"); 

  --Get name input from user
  read(aName); 

  Put("Name Entered: "); Put(aName); New_line; 
  Put(lfmi(aName)); New_line; 



  --LAB TESTS

  setFirst("John    ", aName);
  setMiddle("Paul    ", aName); 
  setLast("Jones   ", aName); 



  pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
  pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
  pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");

   Put(aName); New_line;
   Put("All tests passed!"); New_line;

end name_tester;

bmg23@maroon29:~/214/projects/07$ make ada
make: Nothing to be done for 'ada'.
bmg23@maroon29:~/214/projects/07$ ./name_tester 

Enter all parts of your name with 8 Characters, use spaces to fill.
Enter First Name: Rick    

Enter Middle Name: C137    

Enter Last Name: s Sanchez 
Name Entered: Rick     C137     Sanchez 
Sanchez , Rick     C.
John     Paul     Jones   
All tests passed!
bmg23@maroon29:~/214/projects/07$ exit

Script done on Tue 02 Apr 2019 06:55:56 PM EDT
Script started on Tue 02 Apr 2019 06:56:06 PM EDT
bmg23@maroon29:~/214/projects/07$ cd clojure/src
bmg23@maroon29:~/214/projects/07/clojure/src$ cat *
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Brian Goins
;;;; Date: 03/29/2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name


;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [firstName, middleName, lastName])



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [firstName, middleName, lastName]
  (->Name firstName middleName lastName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName]
  (:middleName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getLast [^Name aName]
  (:lastName aName)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          SETTERS                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setFirst [aName newFirst]
  (->Name newFirst (:middleName aName) (:lastName aName))
)

(defn setMiddle [aName newMiddle]
  (->Name  (:firstName aName) newMiddle (:lastName aName))
)

(defn setLast [aName newLast]
  (->Name (:firstName aName) (:middleName aName) newLast)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn toString [^Name aName]
  (str (getFirst aName)
        " "
        (getMiddle aName)
        " "
        (getLast aName)
  )

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName]
  (print (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the name in special format
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lfmi [aName]
  (let [first (getFirst aName) 
        middle (subs (getMiddle aName) 0 1)
        last (getLast aName)
      ]
    (str last ", " first " " middle ".")
  
  )


)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; read() takes in user input and sets the parts of a name
;;; Receive: user input
;;; Output: sets the name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readName []
  (println "\nPlease hit enter after entering each part of your name.")
  (println "\nEnter your name: ")
  (flush)


  (->Name (read-line) (read-line) (read-line)) 
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    ;;------------------------------------PROJECT TESTS------------------------------------------

    ;;Test Setters
    
    (let [  testName (->Name "Brian" "Mitchell" "Goins")
            testName (setFirst testName "Joe")
            testName (setMiddle testName "Billy")
            testName (setLast testName "Smith")
          ]
      


      (assert (= (getFirst testName) "Joe") "setFirst() failed")
      (assert (= (getMiddle testName) "Billy") "setMiddle() failed")
      (assert (= (getLast testName) "Smith") "setLast() failed")

      ;;Test Name Format
      (assert (= (lfmi testName) "Smith, Joe B.") "lfmi() failed")
    )

    (let [ testName2 (readName) ]

      (print "\nEntered Name: ")
      (printName testName2)
      
      (print "\n")
      (print (lfmi testName2))
    )




    (println "\nAll tests passed!\n")
  )
)

bmg23@maroon29:~/214/projects/07/clojure/src$ cd ..
bmg23@maroon29:~/214/projects/07/clojure$ clojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

Please hit enter after entering each part of your name.

Enter your name: 
Ria ck
C137
SA anchez

Entered Name: Rick C137 Sanchez
Sanchez, Rick C.
All tests passed!

bmg23@maroon29:~/214/projects/07/clojure$ exit

Script done on Tue 02 Apr 2019 06:57:01 PM EDT
Script started on Tue 02 Apr 2019 06:53:07 PM EDT
bmg23@maroon29:~/214/projects/07$ cat N[K*.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Brian Goins
 * Date: 03/29/19
 ************************************************************/

import java.util.Scanner; 

public class NameTester  
{

  public static void main(String[] args)
  {
    /***************
     *PROJECT TESTS
     ***************/

    //Test Mutators    
    Name testName = new Name("Brian", "Mitchell", "Goins"); 

    String first = "Joe"; 
    String middle = "Billy"; 
    String last = "Smith";
    
    testName.setFirst(first);
    testName.setMiddle(middle);
    testName.setLast(last);

    assert testName.getFirst().equals(first);
    assert testName.getMiddle().equals(middle);
    assert testName.getLast().equals(last);

    //Test Name Format
    assert testName.lfmi().equals("Smith, Joe B."); 

    //Get name input from user. 
    Scanner keyboard = new Scanner(System.in);    
    System.out.print("\nEnter your name: ");  

    testName.read(keyboard); 

    System.out.print("\nName entered: " + testName.toString()); 
    System.out.print("\nInitials: " + testName.lfmi() + "\n"); 

    /***************
     *LAB TESTS
     ***************/

    Name aName = new Name("John", "Paul", "Jones");

    assert aName.getFirst().equals("John") ;
    assert aName.getMiddle().equals("Paul") ;
    assert aName.getLast().equals("Jones") ;

    System.out.println(aName);
    assert aName.toString().equals("John Paul Jones");

    System.out.println("All tests passed!");

    keyboard.close(); 
  }
}

class Name 
{
  private String myFirst, myMiddle, myLast; 

  public Name(String first, String middle, String last) {
    myFirst = first;
    myMiddle = middle; 
    myLast = last; 
  }

  //Getters
  public String getFirst() {
    return myFirst;
  }


  public String getMiddle() {
    return myMiddle;
  }


  public String getLast() {
    return myLast;
  }

  //Setters
  public void setFirst(String aFirst) {
    myFirst = aFirst; 
  }
  
  public void setMiddle(String aMiddle) {
    myMiddle = aMiddle; 
  }
  
  public void setLast(String aLast) {
    myLast = aLast; 
  }
  
  //Other FUNctions 

  public void read(Scanner keyboard) {
    myFirst = keyboard.next();
    myMiddle = keyboard.next();
    myLast = keyboard.next();
  }

  public String lfmi() {
    return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + "."; 
  }

  public String toString() {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  }



};

bmg23@maroon29:~/214/projects/07$ j[Kmake java
make: Nothing to be done for 'java'.
bmg23@maroon29:~/214/projects/07$ jazv[K[Kvac NameTester.[K
error: Class names, 'NameTester', are only accepted if annotation processing is explicitly requested
1 error
bmg23@maroon29:~/214/projects/07$ make java
make: Nothing to be done for 'java'.
bmg23@maroon29:~/214/projects/07$ java NameTester.[K

Enter your name: Rick c137 Sanchez

Name entered: Rick c137 Sanchez
Initials: Sanchez, Rick c.
John Paul Jones
All tests passed!
bmg23@maroon29:~/214/projects/07$ exit

Script done on Tue 02 Apr 2019 06:54:19 PM EDT
Script started on Tue 02 Apr 2019 07:10:46 PM EDT
bmg23@maroon29:~/214/projects/07$ cat *.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Brian Goins
# Date: 03/29/2019
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name 
    
    ###################### LAB METHODS ###################### 
    def initialize(first, middle, last)
        @first, @middle, @last = first, middle, last
    end
    
    ## GETTERS ##
    attr_reader :first, :middle, :last

    def fullName()
        return first + " " + middle + " " + last
    end 

    def print()
        puts fullName()
        return fullName()
    end

    ################### PROJECT METHODS ######################


    ## SETTERS ##
    attr_accessor :first, :middle, :last

    ## Name format ##
    def lfmi()
        return last + ", " + first + " " + middle[0,1] + "."
    end

    ## Read ##
    def read() 
        puts "\nEnter your name: "
        line = gets.chomp 

        lineArray = line.split(" ")
        
        @first = lineArray[0]
        @middle = lineArray[1]
        @last = lineArray[2]    


    end    


end


def testName
   
    
    ## LAB TESTS ##
    name = Name.new("John", "Paul", "Jones")

    assert name.first == "John", "first failed"
    assert name.middle == "Paul", "middle failed"
    assert name.last == "Jones", "last failed"
    assert name.fullName == "John Paul Jones", "fullName failed"
    assert name.print == "John Paul Jones", "print failed"
   
    ## PROJECT TESTS ##
    testName = Name.new("Brian", "Mitchell", "Goins")

    name.first = "Joe"
    name.middle = "Billy"
    name.last = "Smith"

    assert name.first == "Joe", "first failed"
    assert name.middle == "Billy", "middle failed"
    assert name.last == "Smith", "last failed"

    ## Get user input
    testName.read

    puts "\nName Entered: "
    testName.print 

    puts "Formatted Name: "
    puts testName.lfmi

   print "All tests passed!\n"
end

testName

bmg23@maroon29:~/214/projects/07$ ruby NameTester.rb
John Paul Jones

Enter your name: 
Rick C137 Sanchez

Name Entered: 
Rick C137 Sanchez
Formatted Name: 
Sanchez, Rick C.
All tests passed!
bmg23@maroon29:~/214/projects/07$ exit

Script done on Tue 02 Apr 2019 07:11:20 PM EDT
